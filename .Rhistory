View(data)
# plotting
ggplot(data) + theme_bw() +
geom_line(aes(interval, meanByInterval), stat = 'identity')
ggplot(data) + theme_bw() +
geom_line(aes(interval, meanByInterval), stat = 'identity', size = 1.3)
ggplot(data) + theme_bw() +
geom_line(aes(interval, meanByInterval), stat = 'identity', size = .8)
?summary
summary(data$meanByInterval)
summary.factor(data$meanByInterval)
summary.factor(data)
summary.factor(data$meanByInterval)
describeBy(data)
?which.max
which.max(data$meanByInterval)
data[data$meanByInterval == which.max(data$meanByInterval),]
which.max(data$meanByInterval)
class(which.max(data$meanByInterval))
summary(data$meanByInterval == which.max(data$meanByInterval))
summary(as.integer(data$meanByInterval) == which.max(data$meanByInterval))
summary(data$meanByInterval == as.integer(which.max(data$meanByInterval)))
which.max(data$meanByInterval)
data[which.max(data$meanByInterval),]
is.na(data$steps)
summary(is.na(data$steps))
data$meanByDay <- tapply(data$steps, data$date, mean, na.rm = TRUE)
?median
data$medianByDay <- tapply(data$steps, data$date, median, na.rm = TRUE)
summary(Data)
summary(da)
summary(data)
?median
tapply(data$steps, data$date, median, na.rm = TRUE)
median(data$steps)
median(data$steps, na.rm = T)
?median
var(data$medianByDay)
?var
var(data$medianByDay, na.rm = TRUE)
var(data$meanByDay, na.rm = TRUE)
names(data)
var(data$medianByDay)
var(data$medianByDay, na.rm = T)
var(data$meanByDay)
var(data$meanByDay, na.rm = TRUE)
var(data$meanByInterval, na.rm = TRUE)
newData <- data
# simple function to populate NAs
populateNAs <- function (df = NULL) {
cat(".")
for (i in 1:nrow(newData)) {
df$steps[i] <- ifelse(is.na(data$steps[i]), data$meanByDay[i], data$steps[i])
}
cat("done")
return(out)
}
newData <- populateNAs(newData)
# simple function to populate NAs
populateNAs <- function (df = NULL) {
for (i in 1:nrow(newData)) {
cat(".")
df$steps[i] <- ifelse(is.na(data$steps[i]), data$meanByDay[i], data$steps[i])
}
cat("done")
return(out)
}
newData <- populateNAs(newData)
# simple function to populate NAs
populateNAs <- function (df = NULL) {
pb <- txtProgressBar(min = 0, max = nrow(newData), style = 3, char = '.')
for (i in 1:nrow(newData)) {
setTxtProgressBar(pb, i)
df$steps[i] <- ifelse(is.na(data$steps[i]), data$meanByDay[i], data$steps[i])
}
cat("done")
return(out)
}
newData <- populateNAs(newData)
# simple function to populate NAs
populateNAs <- function (df = NULL) {
pb <- txtProgressBar(min = 0, max = nrow(newData), style = 3, char = '.')
for (i in 1:nrow(newData)) {
setTxtProgressBar(pb, i)
df$steps[i] <- ifelse(is.na(data$steps[i]), data$meanByDay[i], data$steps[i])
}
cat("done")
return(df)
}
newData <- populateNAs(newData)
View(newData)
summary(newData$steps)
summary(data$steps)
View(data)
data$meanByDay <- tapply(data$steps, data$date, mean, na.rm = TRUE)
View(v)
View(data)
tapply(data$steps, data$date, mean, na.rm = TRUE)
meanByDay <- tapply(data$steps, data$date, mean, na.rm = TRUE)
View(meanByDay)
meanByDay[meanByDat$row.names == '2012-10-01', ]
meanByDay[meanByDay$row.names == '2012-10-01', ]
meanByDay <- as.data.frame(meanByDay)
meanByDay[meanByDay$row.names == '2012-10-01', ]
meanByDay[rownames(meanByDay) == '2012-10-01',]
meanByDay <- data.frame(tapply(data$steps, data$date, mean, na.rm = TRUE))
newData <- data
View(data)
data <- read.csv('data/activity.csv')
View(data)
names(meanByDay)
View(meanByDay)
View(meanByDay)
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm = TRUE))
View(meanByDay)
newData <- data
## Create a new dataset that is equal to the original dataset but with the missing data filled in.
newData <- data
# simple function to populate NAs
populateNAs <- function (df = NULL) {
# calculating the mean by day
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm = TRUE))
# iterating and populating NAs
pb <- txtProgressBar(min = 0, max = nrow(newData), style = 3, char = '.')
for (i in 1:nrow(newData)) {
setTxtProgressBar(pb, i)
df$steps[i] <- ifelse(is.na(data$steps[i]),
meanByDay[rownames(meanByDay) == data$date[i],],
data$steps[i])
}
cat("\ndone")
return(df)
}
newData <- populateNAs(newData)
View(newData)
summary(newData$steps)
summary(data$steps)
is.na(newData$steps)
summary(is.na(newData$steps))
x <- data[is.na(data),]
View(x)
meanByInterval <- tapply(data$steps, data$interval, median, na.rm = TRUE)
var(meanByInterval)
meanByInterval <- tapply(mean = data$steps, data$interval, median, na.rm = TRUE)
meanByInterval <- data.frame(mean = tapply(data$steps, data$interval, median, na.rm = TRUE))
View(meanByInterval)
ggplot(meanByInterval) + theme_bw() + geom_line(aes())
qplot(meanByInterval)
?qplot
qplot(meanByInterval, geom = 'line')
?qplot
summary(meanByInterval)
meanByInterval <- data.frame(mean = tapply(data$steps, data$interval, mean, na.rm = TRUE))
meanByInterval
# simple function to populate NAs
populateNAs <- function (df = NULL) {
# calculating the mean by interval
meanByInterval <- data.frame(mean = tapply(data$steps, data$interval, mean, na.rm = TRUE))
# iterating and populating NAs
pb <- txtProgressBar(min = 0, max = nrow(newData), style = 3, char = '.')
for (i in 1:nrow(newData)) {
setTxtProgressBar(pb, i)
df$steps[i] <- ifelse(is.na(data$steps[i]),meanByInterval[rownames(meanByInterval) == data$interval[i],],data$steps[i])
}
cat("\ndone")
return(df)
}
newData <- populateNAs(newData)
View(newData)
summary(newData$steps)
summary(data$steps)
var(newData$steps)
var(data$steps)
var(data$steps, na.rm = T)
names(newData)
?sum
totalSteps <- data.frame(total = tapply(newData$steps, newData$interval, sum)
)
totalSteps <- data.frame(total = tapply(newData$steps, newData$interval, sum))
View(totalSteps)
names(totalSteps)
View(totalSteps)
totalSteps$interval <- rownmaes(totalSteps)
totalSteps$interval <- rownames(totalSteps)
View(totalSteps)
totalSteps$interval <- as.factor(rownames(totalSteps))
totalSteps <- data.frame(totalSteps = tapply(newData$steps, newData$interval, sum))
totalSteps$interval <- as.factor(rownames(totalSteps))
ggplot(totalSteps) + theme_bw() +
geom_histogram(aes(interval, totalSteps), stat = 'identity')
totalSteps <- data.frame(totalSteps = tapply(newData$steps, newData$date, sum))
totalSteps$interval <- as.factor(rownames(totalSteps))
ggplot(totalSteps) + theme_bw() +
geom_histogram(aes(interval, totalSteps), stat = 'identity')
totalSteps$interval <- as.Date(rownames(totalSteps))
ggplot(totalSteps) + theme_bw() +
geom_histogram(aes(interval, totalSteps), stat = 'identity')
tapply(newData$steps, newData$date, mean)
tapply(newData$steps, newData$date, median)
meanByDateNewData <- tapply(newData$steps, newData$date, mean)
medianByDateNewData <- tapply(newData$steps, newData$date, median)
View(meanByDateNewData)
# reporting mean and median
meanByDateNewData <- data.frame(mean = tapply(newData$steps, newData$date, mean))
medianByDateNewData <- data.frame(median = tapply(median = newData$steps, newData$date, median))
meanByDateNewData <- data.frame(mean = tapply(newData$steps, newData$date, mean))
medianByDateNewData <- data.frame(median = tapply(median = newData$steps, newData$date, median))
meanByDateNewData <- data.frame(mean = tapply(newData$steps, newData$date, mean))
medianByDateNewData <- data.frame(median = tapply( newData$steps, newData$date, median))
names(medianByDateNewData)
meanByDateNewData$date <- as.Date(rownames(meanByDateNewData))
medianByDateNewData$date <- as.Date(rownames(medianByDateNewData))
View(meanByDateNewData)
meanByDateNewData
medianByDateNewData
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm = TRUE))
medianByDay <- data.frame(median = tapply(data$steps, data$interval, median, na.rm = TRUE))
# reporting mean and median
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm = TRUE))
medianByDay <- data.frame(median = tapply(data$steps, data$interval, median, na.rm = TRUE))
meanByDay$date <- as.Date(rownames(meanByDay))
medianByDay$date <- as.Date(rownames(medianByDay))
medianByDay
View(medianByDay)
# reporting mean and median
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm = TRUE))
medianByDay <- data.frame(median = tapply(data$steps, data$date, median, na.rm = TRUE))
meanByDay$date <- as.Date(rownames(meanByDay))
medianByDay$date <- as.Date(rownames(medianByDay))
meanByDay
medianByDay
meanByDateNewData
medianByDateNewData
names(medianByDay)
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity')
ggplot() + theme_bw() +
geom_line(data = meanByDay, aes(date, mean), stat = 'identity')
ggplot() + theme_bw() +
geom_line(data = meanByDay, aes(date, mean), stat = 'identity') +
geom_line(data = meanByDateNewData, aes(date, mean), stat = 'identity')
ggplot() + theme_bw() +
geom_line(data = meanByDay, aes(date, mean), stat = 'identity') +
geom_line(data = meanByDateNewData, aes(date, mean), stat = 'identity') +
geom_line(data = medianByDay, aes(date, median), stat = 'identity') +
geom_line(data = medianByDateNewData, aes(date, median), stat = 'identity')
ggplot() + theme_bw() +
geom_line(data = meanByDay, aes(date, mean), stat = 'identity', color = "#cccccc") +
geom_line(data = meanByDateNewData, aes(date, mean), stat = 'identity') +
geom_line(data = medianByDay, aes(date, median), stat = 'identity') +
geom_line(data = medianByDateNewData, aes(date, median), stat = 'identity')
identical(meanByDay$date, meanByDateNewData$date)
identical(meanByDay$mean, meanByDateNewData$mean)
ggplot() + theme_bw() +
geom_hist(data = meanByDay, aes(date, mean), stat = 'identity', color = "#cccccc") +
geom_hist(data = meanByDateNewData, aes(date, mean), stat = 'identity')
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', color = "#cccccc") +
geom_histogram(data = meanByDateNewData, aes(date, mean), stat = 'identity')
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', color = "#404040") +
geom_histogram(data = meanByDateNewData, aes(date, mean), stat = 'identity', color = "#cccccc")
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', fill = "#404040") +
geom_histogram(data = meanByDateNewData, aes(date, mean), stat = 'identity', fill = "#cccccc")
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', fill = "#404040", position = 'dodge') +
geom_histogram(data = meanByDateNewData, aes(date, mean), stat = 'identity', fill = "#cccccc", position = 'dodge')
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', fill = "#404040", position = 'dodge')
ggplot() + theme_bw() +
geom_histogram(data = meanByDay, aes(date, mean), stat = 'identity', fill = "#404040", position = 'dodge') +
geom_histogram(data = meanByDateNewData, aes(date, mean), stat = 'identity', fill = "#cccccc", position = 'dodge')
ggplot(totalSteps) + theme_bw() +
geom_histogram(aes(interval, totalSteps), stat = 'identity')
View(v)
View(totalSteps)
summary(meanByDay)
summary(medianByDay)
summary(meanByDateNewData)
summary(medianByDateNewData)
var(meanByDay$mean)
var(meanByDay$mean, na.rm = T)
var(meanByDayNewData$mean, na.rm = T)
var(meanByDay$mean, na.rm = T)
var(medianByDateNewData$mean, na.rm = T)
var(meanByDateNewData$mean, na.rm = T)
var(meanByDay$mean, na.rm = T)
var(meanByDateNewData$mean, na.rm = T)
var(meanByDay$mean, na.rm = T)
var(meanByDateNewData$mean, na.rm = T)
?weekdays
weekdays(newData$date)
weekdays(as.Date(newData$date))
weekdays(as.Date(newData$date))[[1]]
weekdays(as.Date(newData$date))0
class(weekdays(as.Date(newData$date))[[1]])
?weekdays
weekdays(as.Date(newData$date))[[1]]
ifelse(
weekdays(as.Date(newData$date) == "Monday" |
weekdays(as.Date(newData$date) == "Tuesday" |
weekdays(as.Date(newData$date) == "Wednesday" |
weekdays(as.Date(newData$date) == "Thursday" |
weekdays(as.Date(newData$date) == "Friday",
newData$weekOrWeekend <- 'weekday',
newData$weekOrWeekend <- 'weekend'
)
)
)
ifelse(
weekdays(as.Date(newData$date)) == "Monday" |
weekdays(as.Date(newData$date)) == "Tuesday" |
weekdays(as.Date(newData$date)) == "Wednesday" |
weekdays(as.Date(newData$date)) == "Thursday" |
weekdays(as.Date(newData$date)) == "Friday",
newData$weekOrWeekend <- 'weekday',
newData$weekOrWeekend <- 'weekend'
)
x <- ifelse(
weekdays(as.Date(newData$date)) == "Monday" |
weekdays(as.Date(newData$date)) == "Tuesday" |
weekdays(as.Date(newData$date)) == "Wednesday" |
weekdays(as.Date(newData$date)) == "Thursday" |
weekdays(as.Date(newData$date)) == "Friday",
newData$weekOrWeekend <- 'weekday',
newData$weekOrWeekend <- 'weekend'
)
nrow(newData)
nrow(x)
View(x)
length(x)
newData$weekOrWeekend <- ifelse(
weekdays(as.Date(newData$date)) == "Monday" |
weekdays(as.Date(newData$date)) == "Tuesday" |
weekdays(as.Date(newData$date)) == "Wednesday" |
weekdays(as.Date(newData$date)) == "Thursday" |
weekdays(as.Date(newData$date)) == "Friday",
newData$weekOrWeekend <- 'weekday',
newData$weekOrWeekend <- 'weekend'
)
summary(newData$weekOrWeekend)
summary(as.factor(newData$weekOrWeekend))
newData$weekOrWeekend <- as.factor(newData$weekOrWeekend)
summary(newData$weekOrWeekend)
names(newData)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend ~ .)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend ~)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend ~ . )
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(weekOrWeekend ~ )
ggplot(newData) + theme_bw() +
geom_line(aes(interval, steps), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
View(newData)
meanByInterval <- data.frame(mean = tapply(newData$steps, newData$interval, mean))
VieW(meanByInterval)
View(meanByInterval)
View(meanByInterval)
nrow(meanByInterval)
namesnewData
names(newData)
newData$intervalMean <- meanByInterval
newData$intervalMean <- tapply(newData$steps, newData$interval, mean)
View(newData)
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(intervalMean, steps), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
VieW(newData)
View(v)
View(v)
View(newData)
ggplot(newData) + theme_bw() +
geom_line(aes(intervalMean, interval), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(intervalMean, interval), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
View(newData)
meanByDay <- tapply(newData$steps, newData$date, mean)
View(meanByDay)
meanByDay$date <- rownames(meanByDay)
View(meanByDay)
meanByDay <- tapply(newData$steps, newData$date, mean)
rownames(meanByDay)
meanByDay$date <- rownames(meanByDay)
meanByDay <- tapply(newData$steps, newData$date, mean)
meanByDay$date <- as.Date(rownames(meanByDay))
View(meanByDay)
meanByDay <- tapply(newData$steps, newData$date, mean)
View(meanByDay)
rownames(meanByDay)
as.character(rownames(meanByDay))
meanByDay$date <- as.character(rownames(meanByDay))
VieW(meanByDay)
View(meanByDay)
names(meanByDay)
meanByDay <- tapply(newData$steps, newData$date, mean)
View(meanByDay)
meanByDay <- data.frame(mean = tapply(data$steps, data$date, mean, na.rm =
meanByDay$date <- as.Date(rownames(meanByDay))
meanByDay <- data.frame(mean = tapply(newData$steps, newData$date, mean))
meanByDay$date <- as.Date(rownames(meanByDay))
View(meanByDay)
meanByDay$weekOrWeekend <- ifelse(
weekdays(as.Date(meanByDay$date)) == "Monday" |
weekdays(as.Date(meanByDay$date)) == "Tuesday" |
weekdays(as.Date(meanByDay$date)) == "Wednesday" |
weekdays(as.Date(meanByDay$date)) == "Thursday" |
weekdays(as.Date(meanByDay$date)) == "Friday",
meanByDay$weekOrWeekend <- 'weekday',
meanByDay$weekOrWeekend <- 'weekend'
)
View(meanByDay)
View(meanByDay)
ggplot(meanByDay) + theme_bw() +
geom_line(aes(mean, interval), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
ggplot(meanByDay) + theme_bw() +
geom_line(aes(date, mean), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
View(newData)
names(newData)
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_wrap(~ weekOrWeekend)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ )
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ .)
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ .) +
ylab('Mean Steps per Interval') +
xlab('5 Minutes Interval')
summary(newData$intervalMean)
data[which.max(data$meanByInterval),]
names(data)
# loading data
data <- read.csv('data/activity.csv')
# cleaning
data$date <- as.Date(data$date)
data$interval <- as.numeric(data$interval)
################################################
################## Plotting ####################
################################################
# histogram of the total number of steps taken each day
ggplot(data) + theme_bw() +
geom_histogram(aes(date, steps), stat = 'identity')
# mean and median of total number of steps taken per day
summary(data$interval)
## Make a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
# calculating the mean using tapply
data$meanByInterval <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
# plotting
ggplot(data) + theme_bw() +
geom_line(aes(interval, meanByInterval), stat = 'identity', size = .8)
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
data[which.max(data$meanByInterval),]
totalSteps <- data.frame(totalSteps = tapply(newData$steps, newData$date, sum))
totalSteps$interval <- as.Date(rownames(totalSteps))
ggplot(totalSteps) + theme_bw() +
geom_histogram(aes(interval, totalSteps), stat = 'identity')
knit2html()
library(knirt)
library(knitr)
knit2html()
?knit2html
setwd("~/Documents/Programming/datascience-represearch-hw1/RepData_PeerAssessment1")
knit2html('PA1_template.Rmd', 'report.html')
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ .) +
ylab('Mean Steps per Interval') +
xlab('5 Minutes Interval')
newData$intervalMean <- tapply(newData$steps, newData$date, mean)
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ .) +
ylab('Mean Steps per Interval') +
xlab('5 Minutes Interval')
newData$intervalMean <- tapply(newData$steps, newData$interval, mean)
# making a plot using the weekOrWeekend variable
ggplot(newData) + theme_bw() +
geom_line(aes(interval, intervalMean), stat = 'identity') +
facet_grid(weekOrWeekend ~ .) +
ylab('Mean Steps per Interval') +
xlab('5 Minutes Interval')
knit2html('PA1_template.Rmd', 'report.html')
